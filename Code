# Install necessary packages
install.packages(c('neuralnet', 'keras', 'tensorflow', 'tidyverse', 'knitr'), dependencies = TRUE)

# Load libraries
library(neuralnet)
library(tidyverse)
library(knitr)

# Load and prepare the Iris dataset
iris <- iris %>% mutate_if(is.character, as.factor)
summary(iris)

# Train and test split
set.seed(254)
data_rows <- floor(0.80 * nrow(iris))
train_indices <- sample(c(1:nrow(iris)), data_rows)
train_data <- iris[train_indices, ]
test_data <- iris[-train_indices,]

# List of hidden layer configurations to test
hidden_layers_list <- list(c(3), c(4), c(5), c(50, 10), c(20, 5), c(15, 10, 5))

# Function to evaluate model accuracy and plot the model
evaluate_model <- function(hidden_layers) {
  model <- neuralnet(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = train_data, hidden = hidden_layers, linear.output = FALSE)
  
  # Plot the model
  plot(model, rep = 'best')
  
  # Predict categories for the test dataset
  pred <- predict(model, test_data)
  labels <- c("setosa", "versicolor", "virginica")
  
  # Transform predictions to label names
  prediction_label <- data.frame(max.col(pred)) %>%
    mutate(pred = labels[max.col.pred.]) %>%
    select(pred) %>%
    unlist()
  
  # Evaluate the model
  check <- as.numeric(test_data$Species) == max.col(pred)
  accuracy <- (sum(check) / nrow(test_data)) * 100
  return(accuracy)
}

# Test and evaluate each hidden layer configuration
results <- data.frame(Hidden_Layers = character(), Accuracy = numeric())

for (hidden_layers in hidden_layers_list) {
  accuracy <- evaluate_model(hidden_layers)
  results <- rbind(results, data.frame(Hidden_Layers = paste(hidden_layers, collapse = "-"), Accuracy = accuracy))
}

# Display the results
print(results)
